Typechecker generated 0 proof obligations.
Typechecker generated 13 proof obligations.
-------------------------------------------
Applying SMT solver ...
SMT solver generated or left 8 proof obligations unproved.

-------------------------------------------
Applying BigO solver ...
Trying case [_ <== spec] ...
Infer and check ...
Start to try different cases
Trying [a * T (n/b) + f n <= T n] case ...
Trying [T n + f n <= T (n + 1)] case ...
Inferred this big-O class for ?4: (fn (__x1 : Nat) (__x0 : Nat) => (($ __x1) * ($ __x0)))

Inferred. Now check inferred complexity (fn (__x1 : Nat) (__x0 : Nat) => (($ __x1) * ($ __x0))) against specified complexity (fn (m : Nat) (n : Nat) => (($ m) * ($ n)))
Complexity check OK!
Trying case [_ <== spec] ...
Infer and check ...
Start to try different cases
Trying [a * T (n/b) + f n <= T n] case ...
Trying [T n + f n <= T (n + 1)] case ...
Inferred this big-O class for ?97: (fn (T_map : (Fun 2)) (__x1 : Nat) (__x0 : Nat) => (($ __x1) * ($ __x0)))

Inferred. Now check inferred complexity (fn (__x1 : Nat) (__x0 : Nat) => (($ __x1) * ($ __x0))) against specified complexity (fn (m : Nat) (n : Nat) => (($ m) * ($ n)))
Complexity check OK!
Trying case [_ <== spec] ...
Infer and check ...
Start to try different cases
Trying [a * T (n/b) + f n <= T n] case ...
Trying [T n + f n <= T (n + 1)] case ...
Inferred this big-O class for ?214: (fn (T_map : (Fun 2)) (T_foldl : (Fun 2)) (__x0 : Nat) => ($ __x0))

Inferred. Now check inferred complexity (fn (__x0 : Nat) => ($ __x0)) against specified complexity (fn (n : Nat) => ($ n))
Complexity check OK!
Trying case [_ <== spec] ...
Infer and check ...
Start to try different cases
Trying [a * T (n/b) + f n <= T n] case ...
Trying [T n + f n <= T (n + 1)] case ...
Trying [f n <= T n] case ...
Inferred this big-O class for ?265: (fn (T_map : (Fun 2)) (T_foldl : (Fun 2)) (T_rev_append : (Fun 1)) (__x0 : Nat) => ($ __x0))

Inferred. Now check inferred complexity (fn (__x0 : Nat) => ($ __x0)) against specified complexity (fn (n : Nat) => ($ n))
Complexity check OK!
BigO solver generated or left 0 proof obligations unproved.

Typechecker generated 10 proof obligations.
-------------------------------------------
Applying SMT solver ...
SMT solver generated or left 0 proof obligations unproved.

Typechecker generated 0 proof obligations.
Typechecking file ../examples/msort.timl ...
Typechecker generated 17 proof obligations.
-------------------------------------------
Applying SMT solver ...
SMT solver generated or left 8 proof obligations unproved.

-------------------------------------------
Applying BigO solver ...
Trying case [_ <== spec] ...
Infer and check ...
Start to try different cases
Trying [a * T (n/b) + f n <= T n] case ...
Trying [T n + f n <= T (n + 1)] case ...
Inferred this big-O class for ?596: (fn (List_T_map : (Fun 2)) (List_T_foldl : (Fun 2)) (List_T_rev_append : (Fun 1)) (List_T_rev : (Fun 1)) (T_map : (Fun 2)) (T_foldl : (Fun 2)) (T_rev_append : (Fun 1)) (T_rev : (Fun 1)) (__x0 : Nat) => ($ __x0))

Inferred. Now check inferred complexity (fn (__x0 : Nat) => ($ __x0)) against specified complexity (?594[(Fun 2) => (Fun 2) => (Fun 1) => (Fun 1) => (Fun 2) => (Fun 2) => (Fun 1) => (Fun 1) => (Nat => Time) => (Nat => Time)] List_T_map List_T_foldl List_T_rev_append List_T_rev List_T_map List_T_foldl List_T_rev_append List_T_rev (?596[(Fun 2) => (Fun 2) => (Fun 1) => (Fun 1) => (Fun 2) => (Fun 2) => (Fun 1) => (Fun 1) => (Nat => Time)] List_T_map List_T_foldl List_T_rev_append List_T_rev List_T_map List_T_foldl List_T_rev_append List_T_rev))
Complexity check OK!
Trying case [_ <== spec] ...
Infer and check ...
Start to try different cases
Trying [a * T (n/b) + f n <= T n] case ...
Trying [T n + f n <= T (n + 1)] case ...
Inferred this big-O class for ?675: (fn (List_T_map : (Fun 2)) (List_T_foldl : (Fun 2)) (List_T_rev_append : (Fun 1)) (List_T_rev : (Fun 1)) (T_map : (Fun 2)) (T_foldl : (Fun 2)) (T_rev_append : (Fun 1)) (T_rev : (Fun 1)) (T_split : (Fun 1)) (__x1 : Nat) (__x0 : Nat) => (($ __x1) * ($ __x0)))

Inferred. Now check inferred complexity (fn (__x1 : Nat) (__x0 : Nat) => (($ __x1) * ($ __x0))) against specified complexity (fn (m : Nat) (n : Nat) => (($ m) * ($ n)))
Complexity check OK!
Trying case [_ <== spec] ...
Infer and check ...
Start to try different cases
Trying [a * T (n/b) + f n <= T n] case ...
Inferred this big-O class for ?768: (fn (List_T_map : (Fun 2)) (List_T_foldl : (Fun 2)) (List_T_rev_append : (Fun 1)) (List_T_rev : (Fun 1)) (T_map : (Fun 2)) (T_foldl : (Fun 2)) (T_rev_append : (Fun 1)) (T_rev : (Fun 1)) (T_split : (Fun 1)) (T_merge : (Fun 2)) (__x1 : Nat) (__x0 : Nat) => (($ __x1) * (($ __x0) * (log2 ($ __x0)))))

Inferred. Now check inferred complexity (fn (__x1 : Nat) (__x0 : Nat) => (($ __x1) * (($ __x0) * (log2 ($ __x0))))) against specified complexity (fn (m : Nat) (n : Nat) => ((($ m) * ($ n)) * (log2 ($ n))))
Complexity check OK!
Trying case [_ <== spec] ...
Infer and check ...
Start to try different cases
Trying [a * T (n/b) + f n <= T n] case ...
Inferred this big-O class for ?861: (fn (List_T_map : (Fun 2)) (List_T_foldl : (Fun 2)) (List_T_rev_append : (Fun 1)) (List_T_rev : (Fun 1)) (T_map : (Fun 2)) (T_foldl : (Fun 2)) (T_rev_append : (Fun 1)) (T_rev : (Fun 1)) (T_split : (Fun 1)) (T_merge : (Fun 2)) (T_msort : (Fun 2)) (__x1 : Nat) (__x0 : Nat) => (($ __x1) * (($ __x0) * (log2 ($ __x0)))))

Inferred. Now check inferred complexity (fn (__x1 : Nat) (__x0 : Nat) => (($ __x1) * (($ __x0) * (log2 ($ __x0))))) against specified complexity (fn (m : Nat) (n : Nat) => ((($ m) * ($ n)) * (log2 ($ n))))
Complexity check OK!
BigO solver generated or left 0 proof obligations unproved.

Typechecking ../examples/msort.timl succeeded.

Typechecking results (as module signatures) for ../examples/msort.timl:

structure MSort : 
  sig
    T_map ::: { __f : (Fun 2) | (__f = List.T_map) }
    T_foldl ::: { __f : (Fun 2) | (__f = List.T_foldl) }
    T_rev_append ::: { __f : (Fun 1) | (__f = List.T_rev_append) }
    T_rev ::: { __f : (Fun 1) | (__f = List.T_rev) }
    T_split ::: BigO 1 (fn (__x0 : Nat) => ($ __x0))
    T_merge ::: BigO 2 (fn (m : Nat) (n : Nat) => (($ m) * ($ n)))
    T_msort ::: BigO 2 (fn (m : Nat) (n : Nat) => ((($ m) * ($ n)) * (log2 ($ n))))
    T_msort ::: BigO 2 (fn (m : Nat) (n : Nat) => ((($ m) * ($ n)) * (log2 ($ n))))
    bool :: (Type (= Basic.bool))
    ibool :: ((Bool => Type) (= Basic.ibool))
    option :: ((Type => Type) (= Basic.option))
    le :: ((Nat => Nat => Type) (= Basic.le))
    list :: ((Type => Nat => Type) (= List.list))
    map : (forall 'a 'b {m : Nat} {n : Nat}, (('a -- ($ m) --> 'b) -> ((List.list 'a n) -- (T_map m n) --> (List.list 'b n))))
    foldl : (forall 'a 'b {m : Nat} {n : Nat}, ((('a * 'b) -- ($ m) --> 'b) -> ('b -> ((List.list 'a n) -- ((($ m) + 4) * ($ n)) --> 'b))))
    foldl : (forall 'a 'b {m : Nat} {n : Nat}, ((('a * 'b) -- ($ m) --> 'b) -> ('b -> ((List.list 'a n) -- (T_foldl m n) --> 'b))))
    hd : (forall '_a {n : { n : Nat | (n > 0) }}, ((List.list '_a n) -> '_a))
    rev_append : (forall '_a {n : Nat} {m : Nat}, (((List.list '_a n) * (List.list '_a m)) -- ($ n) --> (List.list '_a (n + m))))
    rev_append_2 : (forall '_a {n1 : Nat} {n2 : Nat}, ((List.list '_a n1) -> ((List.list '_a n2) -- (T_rev_append n1) --> (List.list '_a (n1 + n2)))))
    rev : (forall '_a {n : Nat}, ((List.list '_a n) -- (T_rev n) --> (List.list '_a n)))
    split : (forall 'a {n : Nat}, ((List.list 'a n) -- (T_split n) --> ((List.list 'a (ceil (($ n) / 2))) * (List.list 'a (floor (($ n) / 2))))))
    merge : (forall 'a {m : Nat} {n1 : Nat} {n2 : Nat}, ((('a * 'a) -- ($ m) --> Basic.bool) -> (((List.list 'a n1) * (List.list 'a n2)) -- (T_merge m (n1 + n2)) --> (List.list 'a (n1 + n2)))))
    msort : (forall 'a {m : Nat} {n : Nat}, ((('a * 'a) -- ($ m) --> Basic.bool) -> ((List.list 'a n) -- (T_msort m n) --> (List.list 'a n))))
    msort : (forall 'a {m : Nat} {n : Nat}, ((('a * 'a) -- ($ m) --> Basic.bool) -> ((List.list 'a n) -- (T_msort m n) --> (List.list 'a n))))
  end


