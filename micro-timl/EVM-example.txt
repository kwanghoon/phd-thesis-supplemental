0: heap free pointer (free_ptr)
32: frame pointer (frame_ptr) a.k.a. base pointer (base_ptr)

compile (reg1 * (reg2 + reg3)) ==
{// compile (Reg reg1) // get_reg reg1
push2 reg1
mload
}
{// compile (reg2 + reg3)
push1 32
mload
push2 reg2
add
mload
push1 32
mload
push2 reg3
add
mload
add
}
mul

(let reg1 = e) ==
compile(e)
{// set_reg reg1
push2 reg1
mstore
}

tuple e_1 ... e_n ==
compile(e_1)
...
compile(e_n)
{// malloc_tuple [t_1, ..., t_n]
push1 0
mload
dup1
push2 n*32
add
push1 0
mstore
}
push2 n*32
add
repeat n { // [m[0]+i*32, e_i]
push1 32
swap1
sub
swap1
{// tuple_assign // [v, m[0]+(i-1)*32]
dup2
mstore // m[m[0]+(i-1)*32] = e_i
}
}

e.n ==
compile(e)
push2 n*32
add
mload

br_sum_to expr inl_branch_label ==
compile(expr)
push32 inl_branch_label // [code, l]
{// br_sum
dup2 // [l, code, l]
//unpack_sum "c"
//push1 32
//add
//mload
//swap1
mload // [b, code, l]
swap1 // [code, b, l]
jumpi_sum
} // [l]

inl [t_other] expr ==
compile(expr)
{// inl [t_other]
push1 #true
{// inj [t_other] // [inj, v]
{// malloc_tuple [ibool{true}, t_expr]
push1 0
mload
dup1
push1 64
add
push1 0
mstore
} // [pair, inj, v]
{// inl_assign [t_other]
swap1 // [inj, pair, v]
dup2
mstore // m[m[0]] = #true // [pair, v]
swap1
dup2
push1 32
add
mstore // m[m[0]+32] = expr // [pair]
pack_inl [t_other]
}
}
}

e1 #< e2 ==
compile(e1)
compile(e2)
swap1 // [v1, v2]
lt // [b]
{// inj_sumbool
push1 tt // [tt, b]
pack [?]
swap1 // [b, tt]
inj
}

new_array e1 e2 ==
compile(e1)
compile(e2)
swap1 // [len, v]
dup1 // [len, len, v]
{// malloc_array t_e2 // [len]
push1 0 
mload // [m[0], len]
push1 32
add // [m[0]+32, len]
dup1 // [m[0]+32, m[0]+32, len]
swap2 // [len, m[0]+32, m[0]+32]
push1 32
mul
add // [m[0]+32+len*32, m[0]+32]
push1 0
mstore // m[0] = m[0] + 32 + len * 32 // [m[0]+32]
} // [m[0]+32, len, v]
dup2 // [len, m[0]+32, len, v]
{ // array_init_len // [len, m[0]+32]
dup2  // [m[0]+32, len, m[0]+32]
push1 32
swap1
sub // [m[0], len, m[0]+32]
mstore // m[m[0]] = len // [m[0]+32]
} // [m[0]+32, len, v]
swap1 // [len, m[0]+32, v]
push1 32
mul // n = len*32, arr = m[0]+32 // [len*32(i.e. n), m[0]+32(i.e. arr), v]
loop: // [n, m[0]+32, v]
jumpdest
push1 ()
dup2 // [n, (), n, m[0]+32, v]
iszero // n<=0 ?
push32 loop_exit
jumpi // [ex, n, m[0]+32, v]
unpackI "__n_neq0"
pop
push1 32
swap1
sub // [n-32, m[0]+32, v]
{// array_init_assign 
dup3 // [v, n-32, m[0]+32, v]
dup3 // [m[0]+32, v, n-32, m[0]+32, v]
dup3 // [n-32, m[0]+32, v, n-32, m[0]+32, v]
add  // [m[0]+32+(n-32), v, n-32, m[0]+32, v]
mstore // m[arr+(n-32)] = v // [n-32, m[0]+32, v]
}
push32 loop
jump
loop_exit: // [ex, n(=0), m[0]+32, v]
jumpdest
unpackI "__n_eq0"
pop
pop // [m[0]+32, v]
swap1
pop // [m[0]+32]
// now arr is top
PreArray2ArrayPtr

new_array_values (e_1, ..., e_n) ==
push2 n // [len]
dup1    // [len, len]
malloc_array // [arr+32, len]
swap1 // [len, arr+32]
array_init_len // [arr+32]
push1 0 // [0, arr+32]
for i = 0 to n-1 { // [32*i, arr+32]
compile(e_i) // [v, 32*i, arr+32]
swap2
swap1 // [32*i, arr+32, v]
array_init_assign  // [32*i, arr+32, v]
swap2
pop // [arr+32, 32*i]
swap1 // [32*i, arr+32]
push1 32
add // [32*(i+1), arr+32]
}
pop
PreArray2ArrayPtr

new_empty_array [t] ==
push1 0
malloc_array t

read e1 e2 ==
compile(e1)
compile(e2)
{// array_ptr
push1 32
mul
add
}
mload

write e1 e2 e3 ==
compile(e1)
compile(e2)
compile(e3) // [v3, v2, v1]
swap2 // [v1, v2, v3]
swap1 // [v2, v1, v3]
array_ptr // [ptr, v3]
mstore
push1 tt

array_len e ==
compile(e)
push1 32
swap1
sub
mload

map_get reg_i reg_(i+1) e1 e2 ==
compile(e1)
compile(e2)
{// map_ptr reg_i reg_(i+1)
push32 i*32
mstore
push2 (i+1)*32
mstore
push1 64
push32 i*32
sha3
}
sload

map_set reg_i reg_(i+1) e1 e2 e3 ==
compile(e1)
compile(e2)
compile(e3)
swap2
swap1
map_ptr reg_i reg_(i+1)
sstore

vector_get r e1 e2 ==
compile(e1)
compile(e2)
swap1
{// vector_ptr r
push2 r*32
mstore
push1 32
push32 r*32
sha3
add
}
sload

vector_set r e1 e2 e3 ==
compile(e1)
compile(e2)
compile(e3)
swap2
vector_ptr r
sstore

vector_push_back r vector_label e2
compile(e2)
{// inc length
push32 vector_label
swap1 // [v, l]
dup2 // [l, v, l]
dup1 // [l, l, v, l]
sload // [len, l, v, l]
swap1
dup2 // [len, l, len, v, l]
push1 1
add
swap1 // [l, len+1, len, v, l]
sstore // s[l] = s[l]+1 // [len, v, l]
}
swap1 // [v, len, l]
swap2 // [l, len, v]
vector_ptr r // [sha3(l)+len), v]
store // s[sha3(l)+len] = v // []
push1 ()

vector_len e ==
compile(e1)
mload

Calling convention 1:

call result_reg callee_addr_expr arg_expr ret_addr_label ==
compile(callee_addr_expr)
compile(arg_expr)
swap1
{// call ret_addr_label
{// heap_push ret_addr_label
push32 ret_addr_label
{// heap_push
{// m[free_ptr] <= top (m[m[0]] = top)
push1 0 
mload
mstore
}
{// free_ptr += 32 (m[0] = 32 + m[0])
push1 32
{// inc_free_ptr (m[0] = top + m[0])
push1 0 
mload
add
push1 0
mstore
}
}
}
}
jump
}
ret_addr_label:
jumpdest
{// pop_to base[result_reg] (m[m[32]+result_reg] = top)
push1 32
mload
push2 result_reg
add
mstore
}

function_prelude ==
{// heap_push m[base_ptr]
push1 32
mload
heap_push
}
{// base_ptr <= m[free_ptr] (m[32] = m[0])
push1 0
mload
push1 32
mstore
}
{// free_ptr += base_size
push2 base_size
inc_free_ptr
}
{// pop_to base[0] (m[m[32]] = top) (pop arg to base[0])
push1 32
mload
mstore
}

return result_expr ==
compile result_expr
{// push base[-64] (i.e. m[m[32]-64], the return ptr)
// equivalent to: compile (Reg -64)
push1 32
mload
push1 64
swap1
sub
mload
}
{// base_ptr <= base[-32] (m[32] = m[m[32]-32])
{// equivalent to: compile (Reg -32)
push1 32
mload
push1 32
swap1
sub
mload
}
push1 32
mstore
}
jump_ret // == jump

Calling convention 2:

call result_reg callee_addr_expr arg_expr ret_addr_label ==
compile(callee_addr_expr)
compile(arg_expr)
swap1
{// call ret_addr_label
push32 ret_addr_label
swap1
jump
}
ret_addr_label:
jumpdest
{// pop_to base[result_reg] (m[m[32]+result_reg] = top)
push1 32
mload
push2 result_reg
add
mstore
}

function_prelude ==
{// heap_push
{// m[free_ptr] <= top (m[m[0]] = top)
push1 0 
mload
mstore
}
{// free_ptr += 32 (m[0] = 32 + m[0])
push1 32
{// inc_free_ptr (m[0] = top + m[0])
push1 0 
mload
add
push1 0
mstore
}
}
}
{// heap_push m[base_ptr]
push1 32
mload
heap_push
}
{// base_ptr <= m[free_ptr] (m[1] = m[0])
push1 0
mload
push1 32
mstore
}
{// free_ptr += base_size
push2 base_size
inc_free_ptr
}
{// pop_to base[0] (m[m[32]] = top) (pop arg to base[0])
push1 32
mload
mstore
}

return result_expr ==
compile result_expr
{// push base[-64] (i.e. m[m[32]-64], the return ptr)
// equivalent to: compile (Reg -64)
push1 32
mload
push1 64
swap1
sub
mload
}
{// base_ptr <= base[-32] (m[32] = m[m[32]-32])
{// equivalent to: compile (Reg -32)
push1 32
mload
push1 32
swap1
sub
mload
}
push1 32
mstore
}
jump_ret // == jump

Calling convention in CPS:

call e1 e2 ==
compile(e1)
compile(e2)
set_reg 0
jump

string operations:

new_string s ==
{// malloc_string |s|
push1 0
mload
push32 |s|
dup2
mstore // m[m[0]] = |s|
dup1
push32 32+|s|
add
push1 0
mstore // m[0] = m[0]+32+|s|
}
push1 32+|s|
add
for n = |s| to 1 {
push1 1
swap1
sub
push1 s[n-1]
dup2
mstore8
}

string_len e ==
compile(e)
{// get_str_len
push1 32
swap1
sub
mload
}

string_concat e1 e2 ==
compile(e1)
compile(e2)
dup2
get_str_len
dup2
get_str_len
dup2
dup2
add // [len1+len2, len2, len1, s2, s1]
dup1 // [len1+len2, len1+len2, len2, len1, s2, s1]
{// malloc_string // [len1+len2]
push1 0
mload // [m[0], len1+len2]
swap1
dup2 // [m[0], len1+len2, m[0]]
dup2 // [len1+len2, m[0], len1+len2, m[0]]
mstore // m[m[0]] = len1+len2 // [len1+len2, m[0]]
swap1 // [m[0], len1+len2]
push32 32
add
dup1 // [m[0]+32, m[0]+32, len1+len2]
swap2 // [len1+len2, m[0]+32, m[0]+32]
add
push1 0
mstore // m[0] = m[0]+32+len1+len2 // [s]
} // [s, len1+len2, len2, len1, s2, s1]
add // [s+len1+len2, len2, len1, s2, s1]
swap2 // [len1, len2, s+len1+len2, s2, s1]
swap3 // [s2, len2, s+len1+len2, len1, s1]
dup2
add // [s2+len2, len2, s+len1+len2, len1, s1]
push32 loop_exit1 // [loop_exit1, s2+len2, len2, s+len1+len2, len1, s1]
swap3 // [s+len1+len2, s2+len2, len2, loop_exit1, len1, s1]
loop: // [s+len1+len2, s2+len2, len2, loop_exit1]
jumpdest
dup3
iszero
dup5
jumpi
push1 1
swap1
sub 
swap1
push1 1
swap1
sub 
swap2
push1 1
swap1
sub // [len2-1, s+len1+len2-1, s2+len2-1, loop_exit1]
dup3
mload
dup2
mstore // [len2-1, s+len1+len2-1, s2+len2-1, loop_exit1]
{// sink2
swap2
swap1 // [s+len1+len2-1, s2+len2-1, len2-1, loop_exit1]
}
push32 loop
jump
loop_exit1: // [s+len1, s2, 0, loop_exit1, len1, s1]
jumpdest
swap3
pop
pop
pop // [s+len1, len1, s1]
push32 loop_exit2
swap3 // [s1, s+len1, len1, loop_exit2]
dup3
add // [s1+len1, s+len1, len1, loop_exit2]
swap1 // [s+len1, s1+len1, len1, loop_exit2]
push32 loop
jump
loop_exit2: // [s, s1, 0, loop_exit2]
jumpdest
swap3
pop
pop
pop // [s]

