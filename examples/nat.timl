(* Operations for indexed natural numbers *)

structure Nat = struct

datatype lt_dec {a b : Nat} =
         Lt {a < b} of lt_dec {a} {b}
       | Ge {a >= b} of lt_dec {a} {b}

fun lt_dec {x y : Nat} (x : nat {x}, y : nat {y}) return lt_dec {x} {y} using 1.0 =
  ifdec x #< y then Lt else Ge

datatype cmp_result {a b : Nat} =
         Equal {a = b} of cmp_result {a} {b} 
       | Less {a < b} of cmp_result {a} {b}
       | Greater {a > b} of cmp_result {a} {b} 

fun cmp {x y : Nat} (x : nat {x}, y : nat {y}) return cmp_result {x} {y} using 4.0 =
  case lt_dec (x, y) of
      Lt => Less
    | Ge => case lt_dec (y, x) of
               Lt => Greater
             | Ge => Equal

datatype le_result : {Nat} {Nat} =
         Le {a b : Nat} {a <= b} of le_result {a} {b} 
       | Gt {a b : Nat} {a > b} of le_result {a} {b} 

fun le {x : Nat} {y : Nat} (x : nat {x}, y : nat {y}) return le_result {x} {y} using 7.0 =
  ifdec x #<= y then Le else Gt
    (* case cmp (x, y) of *)
    (*     Equal => Le *)
    (*   | Less => Le *)
    (*   | Greater => Gt *)

datatype min_max_result : {Nat} {Nat} =
         MinMaxResult {a b a' b' : Nat} {(a <= b -> a' = a /\ b' = b) /\ (a > b -> a' = b /\ b' = a)} of nat {a'} * nat {b'} --> min_max_result {a} {b} 

fun min_max {m : Time} {x y : Nat} (le : nat {x} * nat {y} -- m --> le_result {x} {y}) (x : nat {x}, y : nat {y}) return min_max_result {x} {y} =
    case le (x, y) of
        Le => MinMaxResult (x, y)
      | Gt => MinMaxResult (y, x)

datatype eq_dec {a b : Nat} =
         Eq {a = b} of eq_dec {a} {b}
       | Neq {a <> b} of eq_dec {a} {b}

fun eq_dec {x y : Nat} (x : nat {x}, y : nat {y}) return eq_dec {x} {y} using 5.0 =
  ifdec x #= y then Eq else Neq
    (* case cmp (x, y) of *)
    (*     Equal => Eq *)
    (*   | Less => Neq *)
    (*   | Greater => Neq *)

val nat_1 : nat {1} = #1
val nat_2 : nat {2} = #2
val nat_4 : nat {4} = #4

fun nat_plus {a b : Nat} (a : nat {a}, b : nat {b}) return nat {a + b} using 1.0 =
    a #+ b

fun nat_minus {a b : Nat} {a >= b} (a : nat {a}, b : nat {b}) return nat {a - b} using 1.0 =
    a #- b

fun nat_mult {a b : Nat} (a : nat {a}, b : nat {b}) return nat {a * b} using 1.0 =
    a #* b

fun nat_max {a b : Nat} (a : nat {a}, b : nat {b}) return nat {a max b} using 2.0 =
  case lt_dec (a, b) of
      Lt => b
    | Ge => a

fun bounded_minus {a b : Nat} (a : nat {a}, b : nat {b}) return nat {a - b} =
  ifdec a #< b then #0 : nat {a - b}
  else a #- b                      

fun nat_min {a b : Nat} (a : nat {a}, b : nat {b}) return nat {a min b} using 2.0 =
  case lt_dec (a, b) of
      Lt => a
    | Ge => b

fun floor_half {n : Nat} (n : nat {n}) return nat {floor ($n / 2)} =
  n #/ #2

fun ceil_half {n : Nat} (n : nat {n}) return nat {ceil ($n / 2)} =
  (n #+ #1) #/ #2

datatype nat_less_than {m : Nat} =
         NatLT {n : Nat} {n < m} of nat {n} --> nat_less_than {m}

fun for ['a] {m : Time} {start : Nat} {eend : Nat | start <= eend} (start : nat {start}, eend : nat {eend}, init : 'a, f : forall {i : Nat | start <= i /\ i < eend}, nat {i} * 'a -- m --> 'a) return 'a using 1.0 + (m + 3.0) * $(eend - start) =
  let
    fun loop {i : Nat | start <= i /\ i <= eend} (i : nat {i}, acc : 'a) (* return using (m + 3.0) * $(eend - i) *) =
      ifdec i #>= eend then acc
      else
        loop (i #+ #1, f (i, acc)) using (m + 3.0) * $(eend - i)
  in
    loop (start, init)
  end
  
end
