structure UnitTestBasic1 = struct

(* val x = 1 *)
(* val f = fn y => 1 + y *)
(* fun f y = 1 + y *)
(* val f = fn y => x + y *)
(* fun f y = x + y *)
(* val a = f 64 *)
(* val g = fn y => 1 + y *)
(* val b = f 64 *)
(* val b = a + 2 *)
(* val b = (a, 2) *)

(* val a = if __&false then 1 else 0 *)

(* val x = 1 *)
(* val f = fn {n : Nat} y => y + 1 *)
(* val f = fn {n : Nat} => (fn y => y + 1) using _ *)
(* val f = fn {n : Nat} y => x + y *)
(* fun f {n : Nat} y = y + 1 *)
(* fun f {n : Nat} y = x + y *)
(* val a = @f {1} *)
(* val b = a 1 *)
(* val a = @f {1} 1 *)

(* val x = 1 *)
(* val f = fn y => y *)
(* fun f y = y *)
(* val f = fn y => (x, y) *)
(* fun f y = (x, y) *)
(* val a = f 1 *)
(* val g = f *)

(* val f = fn y => 1 + y *)
(* val g = fn y => f y *)
(* val a = g 64 *)
          
(* val a = "abc" *)
          
(* val () = __&printc #"a" *)

(* val a = 1 *)
(* val a = () *)
(* val a = "" *)
          
(* val x = 1 + 2 *)
(* val y = x + 1 *)

(* fun f x = x + 1 *)
(* val a = f 253 *)
(* val a = f 0xdd *)
          
(* fun f x y = x + y *)
(* val a = f 1 2 *)
          
(* val foo = fn arg => arg + 1 *)
(* val a = foo 0xe1 *)

(* val p = (0xe1, 0xe2) *)
(* val a = __&fst p *)
(* val a = __&snd p *)
          
(* fun twice f x = f (f x) *)
(* fun f x = x + 1 *)
(* val a = twice f 0xdd *)
                  
(* val a = (if __&false then 1 else 0) using _ *)

(* val f = fn x => if x then 1 else 0 *)
(* fun f x = if x then 1 else 0 *)
(* val a = f __&false *)

datatype t = Fst | Snd
datatype t2 = C1 | C2 | C3 of t --> t2

val a =
    let
      val x = C3 Snd
    in
      (case x of
           C1 => 1
         | C2 => 2
         | C3 Fst => 31
         | C3 Snd => 32) using _
    end

(* val a = case C3 Snd of *)
(*             C1 => 1 *)
(*           | C2 => 2 *)
(*           | C3 Fst => 31 *)
(*           | C3 Snd => 32 *)

(* datatype sum 'a 'b = *)
(*          inl of 'a --> sum 'a 'b *)
(*          | inr of 'b --> sum 'a 'b *)
                    
(* datatype empty = *)

(* val f = fn (a : empty) => case a return unit of *)
         
(* val f = fn (a : sum unit empty) => *)
(*            case a of *)
(*                inl () => () *)

(* datatype t = C1 *)

(* val a = case C1 of *)
(*             C1 => 1 *)

(* datatype t = C1 | C2 *)

(* val a = *)
(*     let *)
(*       val x = C2 *)
(*     in *)
(*       (case x of *)
(*            C1 => 1 *)
(*          | C2 => 2) using _ *)
(*     end *)

(* val a = (case C2 of *)
(*             C1 => 1 *)
(*           | C2 => 2) using _ *)

(* val a = *)
(*     let *)
(*       val x = (C2, C2) *)
(*     in *)
(*       (case x of *)
(*            (_, C1) => 1 *)
(*          | (C1, C2) => 12 *)
(*          | (C2, C2) => 22) using _ *)
(*     end *)

(* val a = (case (C2, C2) of *)
(*             (_, C1) => 1 *)
(*           | (C1, C2) => 12 *)
(*           | (C2, C2) => 22) using _ *)

(* datatype t = C1 | C2 | C3 *)

(* val a = (case C3 of *)
(*             C1 => 1 *)
(*           | C2 => 2 *)
(*           | C3 => 3) (* using _ *) *)

(* datatype t = C1 | C2 | C3 | C4 *)

(* val a = case C4 of *)
(*             C1 => 1 *)
(*           | C2 => 2 *)
(*           | C3 => 3 *)
(*           | C4 => 4 *)

(* datatype list 'a : {Nat} = *)
(*          Nil of list 'a {0} *)
(*        | Nil2 of list 'a {0} *)
(*        | Cons {n : Nat} of 'a * list 'a {n} --> list 'a {n + 1} *)

(* val a = case Cons (1, Nil) of *)
(*             Nil => 1 *)
(*           | Nil2 => 12 *)
(*           | Cons _ => 2 *)
                                  
(* val a = if 1 > 2 then 1 else 2 *)

(* val a = ifdec #1 #>= #2 then 1 else 2 *)

(* val a = #3 #+ #1 *)
(* val a = #3 #- #1 *)
(* val a = #3 #* #2 *)
(* val a = #5 #/ #2 *)
                               
(* fun fact_tail {n : Nat} (n : nat {n}, acc) = *)
(*   ifdec n #< #1 then acc *)
(*   else fact_tail (n #- #1, __&nat2int n *acc) using 4.0 * $n *)
                 
(* val a = fact_tail (#4, 1) *)
                  
(* fun fact {n : Nat} (n : nat {n}) = *)
(*   ifdec n #< #1 then 1 *)
(*   else *)
(*     __&nat2int n * fact (n #- #1) using 4.0 * $n *)
                 
(* val a = fact #4 *)
                 
(* (* val () = __&halt a *) *)
              
end
