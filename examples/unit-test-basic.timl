structure CCTestBasic = struct

fun fst a = __&fst a
fun snd a = __&snd a
fun not a = __&not a
val true = __&true
val false = __&false
fun int2str a = __&int2str a
fun print a = __&print a
                
val str_int = int2str
fun println s = print s; print "\n"
                  
(* val a = 1 *)
(* val a = () *)
          
(* val x = 1 + 2 *)
(* val y = x + 1 *)
(* val z = x + y + x *)

(* (* (* val print = builtin "print" : string -- 1.0 --> unit *) *) *)
(* (* (* val str_int = builtin "str_int" : int -- 1.0 --> string *) *) *)

(* (* fun println s = let val () = print s in print "\n" end *) *)

(* (* (* val () = print "z=" *) *) *)
(* (* (* val () = println (int2str z) *) *) *)
(* val () = println <| "z=" ^ int2str z *)
(* (* (* val () = println $ str_int z *) *) *)
              
(* val p = (1, ()) *)
          
(* val i = 1 *)
(* val u = () *)
(* val p = (i, u) *)
          
(* val foo = fn arg => arg + 1 *)

(* val a = foo 1 *)

(* fun f x = x + 1 *)

(* val a = f 2 *)

(* fun f x y = x + y *)

(* val a = f 1 2 *)
(* val () = println <| "a=" ^ int2str a *)

(* fun foo {i : Nat} {j | j > i} () = *)
(*     let *)
(*       fun bar (a : nat {i}, b : nat {j}) = *)
(*           a #+ b *)
(*       fun bar2 (a : nat {j}, b : nat {i}) = *)
(*           b #+ a *)
(*       fun bar3 (a : nat {j}, b : nat {i}) = *)
(*           a #+ b *)
(*     in *)
(*       () *)
(*     end *)
      
(* fun id arg = arg *)

(* val f = id *)

(* val a = f 1 *)

(* val a = f () *)

(* fun twice f x = f (f x) *)

val n = if 1 > 2 then 1 else 2
val () = println <| "n=" ^ int2str n
                                                        
(* fun fact_tail (n, acc) = *)
(*   if n <= 1 then acc *)
(*   else fact_tail (n-1, n * acc) *)
                 
(* val () = println $ "fact_tail (3, 1) =" ^ (int2str $ fact_tail (3, 1)) *)

end
