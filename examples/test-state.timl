val TestState_m : map (*int*) int
val TestState_mm : map (*int*) (map (*int*) int)
val TestState_v : vector int

structure TestState = struct

fun inc n = n + 1
fun add a b = a + b
                
fun foo {len : Nat} () pre {TestState_v : len} post {TestState_v : len+1} =
  let
    val () = push_back (TestState_v, 1)
    val () = set TestState_v[[#0]] 10
    val () = modify TestState_v[[#0]] inc (* == let val x = TestState_v[[0]] in set TestState_v[[0]] (inc x) end == set TestState_v[[0]] (inc TestState_v[[0]]) *)
    val a = TestState_v[[#0]]
    val () = set TestState_m[[1]] 100
    val () = modify TestState_m[[1]] inc
    val b = TestState_m[[1]]
    val () = set TestState_mm[[1]][[2]] 200
    val () = modify TestState_mm[[1]][[2]] ++
    val () = modify TestState_mm[[1]][[2]] += 2
    val c = TestState_mm[[1]][[2]]
  in
    a + b + c
  end

val a = foo ()

val a = vector_len TestState_v

val () = vector_clear TestState_v
val a = vector_len TestState_v
                   
(* val () = __&halt a *)
            
end
