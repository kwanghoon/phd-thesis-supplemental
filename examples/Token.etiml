pragma etiml ^0.1

interface tokenRecipient = sig
  public fun receiveApproval (_from : address, _value : uint256, _token : address, _extraData : bytes)
end

structure Util = struct
  fun addBy b a = a + b
  fun subBy b a = a - b
  fun orBy b a = a || b
  fun require b = if b then () else (throw 0x11111111) using _ end
  val assert = require
end

contract TokenERC20 = struct

  open Util                        
                        
  (* Public variables of the token *)
  (* public state name : ref string *)

  (* public state symbol : ref string *)
  public val decimals : uint8 = 18
  (* 18 decimals is the strongly suggested default, avoid changing it *)
  public state totalSupply : ref uint256

  (* This creates an array with all balances *)
  public state balanceOf : map address uint256
  public state allowance : map address (map address uint256)

  (* This generates a public event on the blockchain that will notify clients *)
  event Transfer(indexed from : address, indexed to : address, value : uint256)

  (* This notifies clients about the amount burnt *)
  event Burn(indexed from : address, value : uint256)

  (**
   * Constructor function
   *
   * Initializes contract with initial supply tokens to the creator of the contract
   *)
  public fun init (
        initialSupply : uint256
        (* tokenName : string, *)
        (* tokenSymbol : string *)
    ) using 14.0 = 
    totalSupply := initialSupply * 10 ** (decimals : uint256);  (* Update total supply with the decimal amount *)
    set balanceOf[msg.sender] totalSupply                (* Give the creator all initial tokens *)
    (* name := tokenName;                                   (* Set the name for display purposes *) *)
    (* symbol := tokenSymbol                               (* Set the symbol for display purposes *) *)

  (**
   * Internal transfer, only can be called by this contract
   *)
  internal fun _transfer (_from : address, _to : address, _value : uint) using 13.0 =
    (* Prevent transfer to 0x0 address. Use burn() instead *)
    require(_to <> 0x0);
    (* Check if the sender has enough *)
    require(balanceOf[_from] >= _value);
    (* Check for overflows *)
    require(balanceOf[_to] + _value > balanceOf[_to]);
    (* Save this for an assertion in the future *)
    let previousBalances = balanceOf[_from] + balanceOf[_to];
    (* Subtract from the sender *)
    modify balanceOf[_from] -= _value;
    (* Add the same to the recipient *)
    modify balanceOf[_to] += _value;
    fire Transfer(_from, _to, _value);
    (* Asserts are used to use static analysis to find bugs in your code. They should never fail *)
    assert(balanceOf[_from] + balanceOf[_to] = previousBalances)

  (**
   * Transfer tokens
   *
   * Send `_value` tokens to `_to` from your account
   *
   * @param _to The address of the recipient
   * @param _value the amount to send
   *)
  public fun transfer (_to : address, _value : uint256) using 16.0 =
    _transfer(msg.sender, _to, _value)

  (**
   * Transfer tokens from other address
   *
   * Send `_value` tokens to `_to` on behalf of `_from`
   *
   * @param _from The address of the sender
   * @param _to The address of the recipient
   * @param _value the amount to send
   *)
  public fun transferFrom (_from : address, _to : address, _value : uint256) return bool using 18.0 =
    require(_value <= allowance[_from][msg.sender]);     (* Check allowance *)
    modify allowance[_from][msg.sender] -= _value;
    _transfer(_from, _to, _value);
    true

  (**
   * Set allowance for other address
   *
   * Allows `_spender` to spend no more than `_value` tokens on your behalf
   *
   * @param _spender The address authorized to spend
   * @param _value the max amount they can spend
   *)
  public fun approve (_spender : address, _value : uint256) return bool using 3.0 =
    set allowance[msg.sender][_spender] _value;
    true

  (**
   * Set allowance for other address and notify
   *
   * Allows `_spender` to spend no more than `_value` tokens on your behalf, and then ping the contract about it
   *
   * @param _spender The address authorized to spend
   * @param _value the max amount they can spend
   * @param _extraData some extra information to send to the approved contract
   *)
  public fun approveAndCall (_spender : address, _value : uint256, _extraData : bytes) using 12.0 =
    let spender = attach _spender tokenRecipient;
    if approve(_spender, _value) then
      call spender receiveApproval(msg.sender, _value, this, _extraData);
      true
    else false end

  (**
   * Destroy tokens
   *
   * Remove `_value` tokens from the system irreversibly
   *
   * @param _value the amount of money to burn
   *)
  public fun burn (_value : uint256) return bool using 6.0 =
    require(balanceOf[msg.sender] >= _value);   (* Check if the sender has enough *)
    modify balanceOf[msg.sender] -= _value;            (* Subtract from the sender *)
    modify totalSupply -= _value;                      (* Updates totalSupply *)
    fire Burn(msg.sender, _value);
    true

  (**
   * Destroy tokens from other account
   *
   * Remove `_value` tokens from the system irreversibly on behalf of `_from`.
   *
   * @param _from the address of the sender
   * @param _value the amount of money to burn
   *)
  public fun burnFrom (_from : address, _value : uint256) return bool using 8.0 =
    require(balanceOf[_from] >= _value);                (* Check if the targeted balance is enough *)
    require(_value <= allowance[_from][msg.sender]);    (* Check allowance *)
    modify balanceOf[_from] -= _value;                         (* Subtract from the targeted balance *)
    modify allowance[_from][msg.sender] -= _value;             (* Subtract from the sender's allowance *)
    modify totalSupply -= _value;                              (* Update totalSupply *)
    fire Burn(_from, _value);
    true

end
