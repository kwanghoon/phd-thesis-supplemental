(* Basic types *)

structure Basic = struct

fun fst a = __&fst a
fun snd a = __&snd a
fun not a = __&not a
val true = __&true
val false = __&false
fun int2str a = __&int2str a
fun print a = __&print a
                
val str_int = int2str
fun println s = print s; print "\n"

(* a datatype version of boolean that is suitable for pattern-matching *)
datatype Bool = True | False

fun b2B b = if b then True else False                      
                      
(* indexed boolean *)
datatype ibool : {Bool} =
         itrue of ibool {true}
         | ifalse of ibool {false}

datatype option 'a =
         NONE
         | SOME of 'a --> option 'a

datatype le {a b : Nat} =
         LE {a <= b} of le {a} {b}
                   
end
