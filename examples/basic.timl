(* Basic types *)

structure Basic = struct

open Pervasive
       
fun fst a = __&fst a
fun snd a = __&snd a
fun not a = __&not a
val true = __&true
val false = __&false
fun nat2int {n : Nat} (a : nat {n}) = __&nat2int a
fun int2nat a = __&int2nat a
fun int2byte a = __&int2byte a
fun byte2int a = __&byte2int a
(* fun int2str a = __&int2str a *)
(* fun print a = __&print a *)
                
(* a datatype version of boolean that is suitable for pattern-matching *)
datatype Bool = True | False

(* indexed boolean *)
datatype iBool : {Bool} =
         ITrue of iBool {true}
         | IFalse of iBool {false}

fun b2B b = if b then True else False                      
fun ib2iB {i : Bool} (b : ibool {i}) return iBool {i} =
  ifdec b then
    ITrue : iBool {i}
  else
    IFalse : iBool {i}
    
datatype option 'a =
         NONE
         | SOME of 'a --> option 'a

datatype le {a b : Nat} =
         LE {a <= b} of le {a} {b}

(* val a = int2nat 10 *)
(* val () = __&halt a *)
                
end
