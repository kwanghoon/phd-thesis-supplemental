pragma etiml ^0.1

structure Util = struct
  fun add b a = a + b
  fun subBy b a = a - b
  fun orBy b a = a  b
  (* val op+= = add *)
  (* val op-= subBy *)
  fun require b = if b then () else throw 1 end
end

contract MyToken = struct

  open Util

  (* This creates an array with all balances *)
  public state balanceOf : map address uint256

  (* Initializes contract with initial supply tokens to the creator of the contract *)
  fun init (initialSupply : uint256) using 11.0 =
    set balanceOf[msg.sender] initialSupply           (* Give the creator all initial tokens *)

  (* Send coins *)
  fun transfer (_to : address, _value : uint256) using 23.0 =
    require(balanceOf[msg.sender] >= _value);           (* Check if the sender has enough *)
    require(balanceOf[_to] + _value >= balanceOf[_to]); (* Check for overflows *)
    modify balanceOf[msg.sender] -= _value;                    (* Subtract from the sender *)
    modify balanceOf[_to] += _value                     (* Add the same to the recipient *)

end
