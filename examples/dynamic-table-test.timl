structure ArrayTable = struct

open Basic
open Array
       
datatype table 'a {size : Nat} {num : Nat} =
         Table {num <= size} of array 'a {size} * nat {num} --> table 'a {size} {num}
                                     
fun table_num_le_size ['a] {size num : Nat} (t : table 'a {size} {num}) return le {num} {size} using 1.0 =
  let                                          
    val Table _ = t
  in
    LE
  end
    
fun alloc ['a] {size : Nat} (size : nat {size}, init : 'a) return table 'a {size} {0} using 1.0 =
  Table (array (size, init), #0)
        
fun do_insert ['a] {size num : Nat} {num < size} (t : table 'a {size} {num}) (x : 'a) return table 'a {size} {num + 1} using 2.0 =
  let
    val Table (a, num) = t
    val () = update (a, num, x) 
  in
    Table (a, num #+ #1)
  end
  
datatype do_delete 'a {num size : Nat} = DoDelete {num' : Nat} {num = num' \/ num = num' + 1} of table 'a {size} {num'} --> do_delete 'a {size} {num}
                                                                                                 
fun do_delete ['a] {size num : Nat} (t : table 'a {size} {num}) return do_delete 'a {size} {num} using 1.0 =
  let
    val Table (a, num) = t
  in
    DoDelete (Table (a, num #- #1))
  end
  
fun copy ['a] {size num size' num' : Nat} (s : table 'a {size} {num}) (t : table 'a {size'} {num'}) return table 'a {size'} {num min size'} using 4.0 * $num + 5.0 =
  let
    val Table (a, num) = s
    val Table (a', num') = t
    val size' = length a'
    val num'' = nat_min (num, size')
    (* val nat {num''} = num'' *)
    idx num'' = num min size'
    fun loop {i | i <= num''} (i : nat {i}) =
      ifdec i #>= num'' then ()
      else update (a', i, sub (a, i)); loop (i #+ #1) using 4.0 * $(num'' - i)
    val () = loop #0
  in
    Table (a', num'')
  end
  
fun num ['a] {size num : Nat} (t : table 'a {size} {num}) return nat {num} using 1.0 =
  let
    val Table (_, num) = t
  in
    num
  end
    
fun size ['a] {size num : Nat} (t : table 'a {size} {num}) return nat {size} using 1.0 =
  let
    val Table (a, _) = t
  in
    length a
  end
                     
fun any_value ['a] {size num : Nat} {size > 0} (t : table 'a {size} {num}) return using 1.0 =
  let
    val Table (a, _) = t
  in
    sub (a, #0)
  end
        
end

structure ArrayDynamicTable = DynamicTable (ArrayTable)

