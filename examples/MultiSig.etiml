(*
//sol Wallet
// Multi-sig, daily-limited account proxy/wallet.
// @authors:
// Gav Wood <g@ethdev.com>
// inheritable "property" contract that enables methods to be protected by requiring the acquiescence of either a
// single, or, crucially, each of a number of, designated owners.
// usage:
// use modifiers onlyowner (just own owned) or onlymanyowners(hash), whereby the same hash must be provided by
// some number (specified in constructor) of the set of owners (specified in the constructor, modifiable) before the
// interior is executed.
*)

structure Pervasive = struct
  fun inc n = n + 1
  fun dec n = n - 1
  fun nat_inc {n : Nat} (n : nat {n}) = n #+ #1
  fun nat_dec {n : Nat | n >= 1} (n : nat {n}) = n #- #1
  fun addBy b a = a + b
  fun subBy b a = a - b
  fun orBy b a = a bit_or b
  fun waste_time () = 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0
  fun require b = if b then waste_time (); () else (throw using _) end
  val assert = require
  val ether = 1000000000000000000
  val minute = 60
end

contract multiowned = struct inherit Pervasive

  (* TYPES *)

  (* struct for the status of a pending operation. *)
  type PendingState = {
      yetNeeded : uint,
      ownersDone : uint,
      index : uint,
  }

  (* FIELDS *)

  (* the number of owners that must confirm the same operation before it is run. *)
  (* zerofiable types can omit initialization *)
  public state m_required : cell uint
  (* pointer used to find a free slot in m_owners *)
  public state m_numOwners : icell

  (* list of owners *)
  (* state m_owners : array uint {256} *)
  state m_owners : map uint uint
  val c_maxOwners = 250
  (* index on the list of owners to allow reverse lookup *)
  state m_ownerIndex : map uint uint
  (* the ongoing operations. *)
  state m_op2state : map bytes32 (* PendingState *){
      yetNeeded : uint,
      ownersDone : uint,
      index : uint,
  }
  state m_idx2op : map uint bytes32
  state m_numOps : icell                       
  public state m_needToIncNumOps : cell bool
                       
  (* EVENTS *)

  (* this contract only has five types of events: it can accept a confirmation, in which case *)
  (* we record owner and operation (hash) alongside it. *)
  event Confirmation(owner : address, operation : bytes32)
  event Revoke(owner : address, operation : bytes32)
  (* some others are in the case of an owner changing. *)
  event OwnerChanged(oldOwner : address, newOwner : address)
  event OwnerAdded(newOwner : address)
  event OwnerRemoved(oldOwner : address)
  (* the last one is emitted if the required signatures change *)
  event RequirementChanged(newRequirement : uint)

  (* MODIFIERS *)

  fun isOwner (_addr : address) return bool =
    m_ownerIndex[_addr : uint] > 0

  (* simple single-sig function modifier. *)
  fun onlyOwner () =
    require(isOwner msg.sender)

  fun copy_PendingState (t : storage PendingState, s : PendingState) =
      &t->yetNeeded ::= s.yetNeeded;
      &t->ownersDone ::= s.ownersDone;
      &t->index ::= s.index

  fun opExists (_operation : bytes32) =
    m_op2state[_operation].yetNeeded > 0

  fun numOpsGood () = require (not !!m_needToIncNumOps)                                         
  fun numOpsBad () = require (!!m_needToIncNumOps)
                             
  fun incNumOps {n : Nat} () pre {m_numOps : n} post {m_numOps : n+1} guard onlyOwner =
    modify m_numOps %nat_inc;
    set m_needToIncNumOps false
                                         
  internal fun confirmAndCheck {n : Nat} (_operation : bytes32) pre {m_numOps : n} guard onlyOwner =
    (* determine what index the present sender is: *)
    let ownerIndex : uint = m_ownerIndex[msg.sender : uint];

    let pending = &m_op2state->[_operation];
    if deref pending->yetNeeded = 0 then
      (* reset count of confirmations needed. *)
      &pending->yetNeeded ::= !!m_required;
      (* reset which owners have confirmed (none) - set our bitmap to 0. *)
      &pending->ownersDone ::= 0;
      let index = nat2int (!!m_numOps);
      &pending->index ::= index;
      set m_idx2op[index] _operation;
      (* we need to rely on the users to increase m_numOps since the post-condition must specify a value for m_numOps *)
      set m_needToIncNumOps true
    end;      
    (* determine the bit to set for this owner. *)
    let ownerIndexBit : uint = 2**ownerIndex;
    (* make sure we (the message sender) haven't confirmed this operation previously. *)
    if (deref pending->ownersDone) bit_and ownerIndexBit = 0 then
      fire Confirmation(msg.sender, _operation);
      (* ok - check if count is enough to go ahead. *)
      if deref pending->yetNeeded <= 1 then
        (* enough confirmations: reset and run interior. *)
        set m_idx2op[m_op2state[_operation].index] 0;
        copy_PendingState (pending, {yetNeeded = 0,
                                     ownersDone = 0,
                                     index = 0,
                          });
        true
      else
        (* not enough: record that this owner in particular confirmed. *)
        modify &pending->yetNeeded dec;
        modify &pending->ownersDone |= ownerIndexBit;
        false
      end
    else
      false
    end

  (* multi-sig function modifier: the operation must have an intrinsic hash in order *)
  (* that later attempts can be realised as the same underlying operation and *)
  (* thus count as confirmations. *)
  fun onlymanyowners {n : Nat} (_operation : bytes32) () pre {m_numOps : n} =
    require(%confirmAndCheck(_operation))

  (* METHODS *)

  (* constructor is given number of sigs required to do protected "onlymanyowners" transactions *)
  (* as well as the selection of addresses capable of confirming them. *)
  fun init {old len : Nat} (_owners : array address {len}, _required : uint) pre {m_numOwners : old} post {m_numOwners : len+1} =
    set m_numOwners array_len _owners #+ #1;
    set m_owners[1] msg.sender;
    set m_ownerIndex[msg.sender] 1;
    (* for (i : uint = 0; i < length _owners; inc) *)
    (*   (* PW: is 2+i<256 ? *) *)
    (*   set m_owners[2 + i] uint(_owners[i]); *)
    (*   set m_ownerIndex[uint(_owners[i])] 2 + i *)
    (* end; *)
    m_required ::= _required

  (* Revokes a prior confirmation of the given operation *)
  external fun revoke (_operation : bytes32) guard onlyOwner =
    let ownerIndex = m_ownerIndex[msg.sender : uint];
    let ownerIndexBit : uint = 2**ownerIndex;
    let pending = &m_op2state->[_operation];
    if deref pending->ownersDone bit_and ownerIndexBit > 0 then
      modify &pending->yetNeeded inc;
      modify &pending->ownersDone -= ownerIndexBit;
      fire Revoke(msg.sender, _operation)
    end

  internal fun clearPending {len : Nat} () pre {m_numOps : len} post {m_numOps : 0} guard numOpsGood =
    let length = !!m_numOps;
    (* for (i : uint = 0; i < length; inc) *)
    (*   if m_idx2op[i] != 0 then *)
    (*     set m_op2state [m_idx2op[i] ] zero *)
    (*   end *)
    (* end; *)
    set m_numOps #0

  (* Replaces an owner `_from` with another `_to`. *)
  (* PW: why should we put block.number in the hash? Do we require the first and last attempts of this operations to be in the same block? *)      
  external fun changeOwner {len : Nat} (_from : address, _to : address) pre {m_numOps : len} post {m_numOps : 0} guard %onlymanyowners(sha3(msg.data, block.number)), numOpsGood =
    require (isOwner(_from));
    require (not isOwner(_to));
    let ownerIndex = m_ownerIndex[_from];

    %clearPending();
    set m_owners[ownerIndex] _to;
    set m_ownerIndex[_from] 0;
    set m_ownerIndex[_to] ownerIndex;
    fire OwnerChanged(_from, _to)

  fun hasConfirmed (_operation : bytes32, _owner : address) guard onlyOwner =
    let ownerIndex : uint = m_ownerIndex[_owner];

    (* determine the bit to set for this owner. *)
    let ownerIndexBit : uint = 2**ownerIndex;
    if m_op2state[_operation].ownersDone bit_and ownerIndexBit = 0 then
      false
    else
      true
    end

  state m_newNumOwners : cell uint
  state m_needToSetNumOwners : cell bool
                            
  fun numOwnersGood () = require (not !!m_needToSetNumOwners)                                         
  fun numOwnersBad () = require (!!m_needToSetNumOwners)
                             
  fun incNumOwners {old new : Nat} (new : nat {new}) pre {m_numOwners : old} post {m_numOwners : new} guard numOwnersBad =
    require(nat2int new = !!m_newNumOwners);
    set m_numOwners new;
    set m_needToSetNumOwners false

  fun getNewNumOwners () = !!m_newNumOwners

  private fun reorganizeOwners {len : Nat} () pre {m_numOwners : len} guard numOwnersGood =
    let free : ref uint = ref 1;
    set m_newNumOwners 0;
    (* while (!free < m_numOwners) *)
    (*   while (!free < m_numOwners && m_owners[!free] != 0) modify free inc end; *)
    (*   while (m_numOwners > 1 && m_owners[m_numOwners] = 0) modify m_numOwners dec end; *)
    (*   if !free < m_numOwners && m_owners[m_numOwners] != 0 && m_owners[!free] = 0 then *)
    (*     set m_owners[!free] m_owners[m_numOwners]; *)
    (*     set m_ownerIndex[m_owners[!free] ] (!free); *)
    (*     set m_owners[m_numOwners] 0 *)
    (*   end *)
    (* end; *)
    set m_needToSetNumOwners true

  external fun addOwner {len1 len2 : Nat} (_owner : address) pre {m_numOwners : len1, m_numOps : len2} post {m_numOwners : len1, m_numOps : 0} guard %onlymanyowners(sha3(msg.data, block.number)), numOwnersGood =
    require (not isOwner(_owner));

    %clearPending();
    if nat2int !!m_numOwners >= c_maxOwners then
      %reorganizeOwners()
    end;
    require (!!m_newNumOwners < c_maxOwners);
    modify m_newNumOwners inc;
    let index = !!m_newNumOwners;
    set m_owners[index] _owner;
    set m_ownerIndex[_owner] index;
    set m_needToSetNumOwners true;
    fire OwnerAdded(_owner)

  external fun removeOwner {len1 len2 : Nat} (_owner : address) pre {m_numOwners : len1, m_numOps : len2} post {m_numOwners : len1, m_numOps : 0} guard %onlymanyowners(sha3(msg.data, block.number)), numOwnersGood =
    require (isOwner(_owner));
    let ownerIndex : uint  = m_ownerIndex[_owner];
    require(!!m_required <= nat2int !!m_numOwners - 1);

    set m_owners[ownerIndex] 0;
    set m_ownerIndex[_owner] 0;
    %clearPending();
    %reorganizeOwners(); 
    set m_needToSetNumOwners true;
    fire OwnerRemoved(_owner)

  external fun changeRequirement {len1 len2 : Nat} (_newRequired : uint) pre {m_numOwners : len1, m_numOps : len2} post {m_numOwners : len1, m_numOps : 0} guard %onlymanyowners(sha3(msg.data, block.number)), numOwnersGood =
                                                                                                           require (_newRequired <= nat2int !!m_numOwners);
   set m_required _newRequired;
   %clearPending();
   fire RequirementChanged(_newRequired)

end

(* // inheritable "property" contract that enables methods to be protected by placing a linear limit (specifiable) *)
(* // on a particular resource per calendar day. is multiowned to allow the limit to be altered. resource that method *)
(* // uses is specified in the modifier. *)

(* contract daylimit = struct inherit multiowned *)

(*   (* MODIFIERS *) *)

(*   (* simple modifier for daily limit. *) *)
(*   fun limitedDaily (_value : uint) k = *)
(*     if underLimit(_value) then *)
(*       k () *)
(*     else *)
(*       throw *)
(*     end *)

(*   (* METHODS *) *)

(*   (* constructor - stores initial daily limit and records the present day's index. *) *)
(*   fun init (_limit : uint ) = *)
(*     m_dailyLimit := _limit; *)
(*     m_lastDay := today() *)

(*   (* (re)sets the daily limit. needs many of the owners to confirm. doesn't alter the amount already spent today. *) *)
(*   external fun setDailyLimit (_newLimit : uint) guard onlymanyowners(sha3(msg.data, block.number)) = *)
(*     m_dailyLimit := _newLimit *)

(*   external fun resetSpentToday () guard onlymanyowners(sha3(msg.data, block.number)) = *)
(*     m_spentToday := 0 *)

(*   (* INTERNAL METHODS *) *)

(*   (* checks to see if there is at least `_value` left from the daily limit today. if there is, subtracts it and *) *)
(*   (* return true. otherwise just return false. *) *)
(*   internal fun underLimit (_value : uint) guard onlyowner return bool = *)
(*     (* reset the spend limit if we're on a different day to last time. *) *)
(*     if today() > !m_lastDay then *)
(*       m_spentToday := 0; *)
(*       m_lastDay := today() *)
(*     end; *)
(*     (* check to see if there's enough left - if so, subtract and return true. *) *)
(*     if !m_spentToday + _value >= !m_spentToday && !m_spentToday + _value <= !m_dailyLimit then *)
(*       modify m_spentToday += _value; *)
(*       true *)
(*     else *)
(*       false *)
(*     end *)

(*   (* determines today's index. *) *)
(*   private fun today () constant return uint = now / 1 days *)

(*   (* FIELDS *) *)

(*   public state m_dailyLimit : cell uint *)
(*   public state m_spentToday : cell uint *)
(*   public state m_lastDay : cell uint *)

(* end *)

(* (* interface contract for multisig proxy contracts; see below for docs. *) *)
(* (* PW: this is an incomplete contract *) *)
(* interface multisig = sig *)

(*   (* EVENTS *) *)

(*   (* logged events: *) *)
(*   (* Funds has arrived into the wallet (record how much). *) *)
(*   event Deposit(from : address, value : uint) *)
(*   (* Single transaction going out of the wallet (record who signed for it, how much, and to whom it's going). *) *)
(*   event SingleTransact(owner : address, value : uint, to : address, data : bytes) *)
(*   (* Multi-sig transaction going out of the wallet (record who signed for it last, the operation hash, how much, and to whom it's going). *) *)
(*   event MultiTransact(owner : address, operation : bytes32, value : uint, to : address, data : bytes) *)
(*   (* Confirmation still needed for a transaction. *) *)
(*   event ConfirmationNeeded(operation : bytes32, initiator : address, value : uint, to : address, data : bytes) *)

(*   (* FUNCTIONS *) *)

(*   (* TODO: document *) *)
(*   external fun changeOwner (_from : address, _to : address) *)
(*   external fun execute (_to : address, _value : uint, _data : bytes) return bytes32 *)
(*   fun confirm (_h : bytes32) return bool *)

(* end *)

(* (* *) *)
(* (* // usage: *) *)
(* (* // bytes32 h = Wallet(w).from(oneOwner).transact(to, value, data); *) *)
(* (* // Wallet(w).from(anotherOwner).confirm(h); *) *)
(* (* *) *)
(* contract Wallet = struct inherit multisig, multiowned, daylimit *)

(*   public val version : uint = 2 *)

(*   (* TYPES *) *)

(*   (* Transaction structure to remember details of transaction lest it need be saved for a later call. *) *)
(*   type Transaction = { *)
(*     to : address, *)
(*     value : uint, *)
(*     (* data : bytes, *) *)
(*   } *)

(*   (* METHODS *) *)

(*   (* constructor - just pass on the owner array to the multiowned and *) *)
(*   (* the limit to daylimit *) *)
(*   fun init (_owners : vector address, _required : uint, _daylimit : uint) *)
(*     forward_to multiowned(_owners, _required) guard daylimit(_daylimit) = () *)

(*   (* kills the contract sending everything to `_to`. *) *)
(*   external fun kill (_to : address) guard onlymanyowners(sha3(msg.data, block.number)) = *)
(*     suicide(_to) *)

(*   (* gets called when no other function matches *) *)
(*   fun default () = *)
(*     (* just being sent some cash? *) *)
(*     if msg.value > 0 then *)
(*       Deposit(msg.sender, msg.value) *)
(*     end *)

(*   (* *) *)
(* (*   // Outside-visible transact entry point. Executes transacion immediately if below daily spend limit. *) *)
(* (*   // If not, goes into multisig process. We provide a hash on return to allow the sender to provide *) *)
(* (*   // shortcuts for the other confirmations (allowing them to avoid replicating the _to, _value *) *)
(* (*   // and _data arguments). They still get the option of using them if they want, anyways. *) *)
(* (*   *) *)
(*   external fun execute (_to : address, _value : uint, _data : bytes) guard onlyowner return bytes32 = *)
(*     (* first, take the opportunity to check that we're under the daily limit. *) *)
(*     if underLimit(_value) then *)
(*       SingleTransact(msg.sender, _value, _to, _data); *)
(*       (* yes - just execute the call. *) *)
(*       call_with_value (_to, _value, _data); *)
(*       return 0 *)
(*     end; *)
(*     (* determine our operation hash. *) *)
(*     let _r = sha3(msg.data, block.number); *)
(*     if not confirm(_r) && !m_txs[_r].to == 0 then *)
(*       m_txs[_r].to := _to; *)
(*       m_txs[_r].value := _value; *)
(*       m_txs[_r].data := _data; *)
(*       ConfirmationNeeded(_r, msg.sender, _value, _to, _data) *)
(*     end; *)
(*     _r *)

(*   (* confirm a transaction through just the hash. we use the previous transactions map, m_txs, in order *) *)
(*   (* to determine the body of the transaction from the hash provided. *) *)
(*   fun confirm (_h : bytes32) guard onlymanyowners(_h) return bool = *)
(*     if !m_txs[_h].to != 0 then *)
(*       call_with_value (!m_txs[_h].to, !m_txs[_h].value, !m_txs[_h].data); *)
(*       MultiTransact(msg.sender, _h, !m_txs[_h].value, !m_txs[_h].to, !m_txs[_h].data); *)
(*       set m_txs[_h] zero; *)
(*       true *)
(*     else *)
(*       false *)
(*     end *)

(*   (* INTERNAL METHODS *) *)

(*   internal fun clearPending () = *)
(*     let length : uint = length m_idx2op; *)
(*     for (i : uint = 0; i < length; inc) *)
(*       set m_txs[m_idx2op[i] ] zero *)
(*     end; *)
(*     super.clearPending() *)

(*   (* FIELDS *) *)

(*   (* pending transactions we have at present. *) *)
(*   state m_txs : map bytes32 Transaction *)
                                                  
(* end *)
