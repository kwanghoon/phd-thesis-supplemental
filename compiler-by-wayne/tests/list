(type (list (fn (A : *) (rec (T : (=> nat *)) (fn (L : nat) (+t (exists {(=n L 0)} Unit) (exists (N : nat) (exists {(=n L (+n N 1))} (*t A (T N)))))))))

(let (nil (fn {A : *} (fold ((inl (pack {(=n 0 0)} tt (exists {(=n 0 0)} Unit)) ((list [A]) [0])) : ((list [A]) {0})) ((list [A]) 0))))

(let (cons (fn {A : *} (fn {L : nat} (fn (h : A) (fn (t : ((list [A]) L)) (fold ((inr (pack L (pack {(=n (+n L 1) (+n L 1))} (pair h t) (exists {(=n (+n L 1) (+n L 1))} (*t A ((list [A]) L)))) (exists (N : nat) (exists {(=n (+n L 1) (+n N 1))} (*t A ((list [A]) N))))) ((list [A]) [(+n L 1)])) : ((list [A]) {(+n L 1)})) ((list [A]) (+n L 1))))))))

(let (map (rec (g : (forall (A : *) (forall (B : *) (forall (M : nat) (forall (N : nat) (-> (-> A B (n2t M)) (-> ((list [A]) N) ((list [B]) N) (*r (n2t (+n M 5)) (n2t N))))))))) (fn {A : *} (fn {B : *} (fn {M : nat} (fn {N : nat} (fn (f : (-> A B (n2t M))) (fn (ls : ((list [A]) N)) ((case (x ((unfold ls) : ((list [A]) [N]))) ((nil [B]) : ((list [B]) N)) (unpack (L y x) (unpack (U p y) (let (x (fst p)) (let (xs (snd p)) ((((((cons [B]) [L]) (f x)) ((((((g [A]) [B]) [M]) [L]) f) xs)) : ((list [B]) N)) |> (*r (n2t (+n M 5)) (n2t N)))))))) |> (*r (n2t (+n M 5)) (n2t N)))))))))))

(let (foldl (rec (g : (forall (A : *) (forall (B : *) (forall (M : nat) (forall (N : nat) (-> (-> (*t A B) B (n2t M)) (-> B (-> ((list [A]) N) B (*r (n2t (+n M 4)) (n2t N)))))))))) (fn {A : *} (fn {B : *} (fn {M : nat} (fn {N : nat} (fn (f : (-> (*t A B) B (n2t M))) (fn (y : B) (fn (ls : ((list [A]) N)) ((case (x ((unfold ls) : ((list [A]) [N]))) y (unpack (L z x) (unpack (U p z) (let (x (fst p)) (let (xs (snd p)) ((((((((g [A]) [B]) [M]) [L]) f) (f (pair x y))) xs) |> (*r (n2t (+n M 4)) (n2t N)))))))) |> (*r (n2t (+n M 4)) (n2t N))))))))))))

(let (rev_append (rec (g : (forall (A : *) (forall (N : nat) (forall (M : nat) (-> (*t ((list [A]) N) ((list [A]) M)) ((list [A]) (+n N M)) (*r (n2t 3) (n2t N))))))) (fn {A : *} (fn {N : nat} (fn {M : nat} (fn (arg : (*t ((list [A]) N) ((list [A]) M))) ((let (xs (fst arg)) (let (ys (snd arg)) (case (x ((unfold xs) : ((list [A]) [N]))) (ys : ((list [A]) (+n N M))) (unpack (L z x) (unpack (U p z) (let (hd (fst p)) (let (tl (snd p)) ((((((g [A]) [L]) [(+n M 1)]) (pair tl ((((cons [A]) [M]) hd) ys))) : ((list [A]) (+n N M))) |> (*r (n2t 3) (n2t N)))))))))) |> (*r (n2t 3) (n2t N)))))))))

(let (rev (fn {A : *} (fn {N : nat} (fn (xs : ((list [A]) N)) ((((rev_append [A]) [N]) [0]) (pair xs (nil [A])))))))

  tt)))))))