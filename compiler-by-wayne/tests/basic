(type (nbool (+t Unit Unit))
(let (tru (inl tt nbool))
(let (fals (inr tt nbool))

(type (ibool (fn (B : bool) (+t (exists {(=n (b2n B) 1)} Unit) (exists {(=n (b2n B) 0)} Unit))))
(let (itru (inl (pack {(=n (b2n true) 1)} tt (exists {(=n (b2n true) 1)} Unit)) (ibool [true])))
(let (ifals (inr (pack {(=n (b2n false) 0)} tt (exists {(=n (b2n false) 0)} Unit)) (ibool [false])))

(type (option (fn (A : *) (+t Unit A)))
(let (none (fn {A : *} (inl tt (option [A]))))
(let (some (fn {A : *} (fn (x : A) (inr x (option [A])))))

(let (le (fn {A : nat} (fn {B : nat} (fn {P : {(<=n A B)}} (pack P tt (exists {(<=n A B)} Unit))))))
  tt))))))))))