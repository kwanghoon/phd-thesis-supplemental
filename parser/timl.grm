open Ast

%%

%name TiML

%term ID of string
    | LPAREN
    | RPAREN
    | DARROW
    | FN
    | FUN
    | LSQ
    | RSQ
    | LCUR
    | RCUR
    | UNPACK
    | CASE
    | OF
    | COLON
    | RTRI
    | LTRI
    | LET
    | IN
    | END
    | COMMA
    | RETURN
    | ARROW
    | LARROW
    | DDASH
    | MULT
    | EXP
    | DIV
    | PLUS
    | MINUS
    | NAT_PLUS
    | NAT_MINUS
    | NAT_MULT
    | NAT_DIV
    | NAT_LT
    | INT of int
    | NNREAL of string
    | BAR
    | TILDE
    | AND
    | OR
    | IFF
    | EQ
    | NEQ
    | DOUBLE_EQ
    | DOUBLE_POND
    | DOUBLE_BAR
    | VAL
    | DATATYPE
    | EOF
    | FORALL
    | EXISTS
    (* | APP (* dummy terminal for precedence *) *)
    | APPR (* dummy terminal for precedence *)
    | MAX
    | MIN
    | BOGUS of string
    | AS
    | DOLLAR
    | AT
    | LE
    | LT
    | GE
    | GT
    | BIG_O_INFIX
    | IDX
    | TYPE
    (* | ABSTYPE *)
    | ABSIDX
    | WITH
    | DOT
    | STRUCTURE
    | STRUCT
    | FUNCTOR
    | SIG
    | OPEN
    | COLON_GT
    | ZERO_ARROW
    | IF
    | THEN
    | ELSE
    | DCOLON
    | SHARP
    | STRING of string
    | STR_CONCAT
    | SEMI_COLON
    | NEVER
    | IFDEC

%nonterm start of prog
       | exp of exp
       | aexp of exp
       | ty of ty
       | ty_term of ty
       | ty_atom of ty
       | idx of idx
       | aidx of idx
       | sort of sort
       | bsort of bsort
       | prop of prop
       | id of id
       | exp_comma_star of exp list
       | comma_exp_star of exp list
       | bind_plus of bind list
       | bind_star of bind list
       | bind of bind list
       | sort_bind_plus of sort_bind list
       | sort_bind_star of sort_bind list
       | sort_bind of sort_bind list
       | return of ty option * idx option
       | rec_return of ty option * idx option
       | rule_bar_star of (ptrn * exp) list
       | bar_rule_star of (ptrn * exp) list
       | rule of ptrn * exp
       | ptrn of ptrn
       | aptrn of ptrn
       | ptrn_opt of ptrn option
       | ptrn_comma_star of ptrn list
       | comma_ptrn_star of ptrn list
       | idx_ids of id list
       | id_plus of id list
       | id_star of id list
       | decl_star of decl list
       | decl of decl
       | quan of quan
       | cur_sort of sort
       | cur_sort_star of sort list
       | cur_sort_plus of sort list
       | cur_bsort of bsort
       | cur_bsort_star of bsort list
       | cur_bsort_plus of bsort list
       (* | sort_plus of sort list *)
       | constr_bar_star of constr_decl list
       | bar_constr_star of constr_decl list
       | constr of constr_decl
       | constr_core_opt of constr_core option
       | constr_result_opt of ty option
       | sorting_star of sort_bind list
       | sorting of sort_bind list
       | bsorting_star of bsort_bind list
       | bsorting of bsort_bind list
       (* | idx_un_op of idx_un_op *)
       | tname of id
       | tnames of id list
       | optional_colon_sort of sort option
       | optional_eq_idx of idx option
       | decorated_id of long_id * bool
       | long_id of long_id
       | prog of prog
       | top_bind of top_bind
       | module of mod
       | sgn of sgn
       | spec of spec
       | specs of spec list
       | datatype_def of datatype_def
         (* | sig_anno_opt of sig_anno option *)
       | datatype_def_kind of bsort list

%keyword FN CASE UNPACK OF LET IN END RETURN VAL DATATYPE AS TYPE STRUCTURE STRUCT FUNCTOR SIG OPEN IDX IF THEN ELSE

%pos pos

		(* %nonassoc LET *)
%left RTRI COLON COLON_GT
%nonassoc LSQ LCUR
%left COMMA
%right SEMI_COLON
%right LTRI
%right DCOLON
%nonassoc IFF
%right DDASH LARROW ARROW ZERO_ARROW
%right OR
%right AND
%left DOUBLE_BAR
%left DOUBLE_POND
%left DOUBLE_EQ
%nonassoc TILDE
%nonassoc EQ NEQ LE LT GE GT NAT_LT
%left PLUS MINUS NAT_PLUS NAT_MINUS
%left MULT DIV MAX MIN NAT_MULT NAT_DIV
(* %left APP *)
(* %left APPR *)

%eop EOF
%noshift EOF
%nodefault
%verbose

%arg (reporter) : reporter

%%

start : prog (prog)

prog : top_bind prog (top_bind :: prog)
     | ([])

top_bind : STRUCTURE id EQ id LPAREN id RPAREN (TopFunctorApp (id1, id2, id3))
         | FUNCTOR id LPAREN id COLON sgn RPAREN EQ module (TopFunctorBind (id1, (id2, sgn), module))
         | STRUCTURE id EQ module (TopModBind (id, module))
         (* | STRUCTURE id sig_anno_opt EQ module (TopModBind (id, add_sig_anno module sig_anno_opt)) *)
         | STRUCTURE id COLON_GT sgn EQ module (TopModBind (id, ModSeal (module, sgn)))
         | STRUCTURE id COLON sgn EQ module (TopModBind (id, ModTransparentAsc (module, sgn)))
         

module : STRUCT decl_star END (ModComponents (decl_star, (decl_starleft, decl_starright)))
    (* | module COLON_GT sgn (ModSeal (module, sgn)) *)
    (* | module COLON sgn (ModTransparentAsc (module, sgn)) *)

(* sig_anno_opt : COLON_GT sgn (SOME (Seal sgn)) *)
(*              | COLON sgn (SOME (Transparent sgn)) *)
(*              | (NONE) *)
      
sgn : SIG specs END (SigComponents (specs, (specsleft, specsright)))

specs : spec specs (spec :: specs)
  | ([])

spec : VAL id tnames COLON ty (SpecVal (id, tnames, ty, (VALleft, tyright)))
  | DATATYPE datatype_def (SpecDatatype datatype_def)
  | IDX id COLON sort (SpecIdx (id, sort))
  | TYPE id EQ ty (SpecTypeDef (id, ty))
  | TYPE id_plus cur_bsort_star (SpecType (id_plus, cur_bsort_star, (TYPEleft, cur_bsort_starright)))
  | TYPE id (SpecType ([id], [], (TYPEleft, idright))) (* need this rule. don't know why *)

decl : VAL tnames ptrn EQ exp (Val (tnames, ptrn, exp, (VALleft, expright)))
     | FUN id tnames bind_star return EQ exp (Rec (tnames, id, bind_star, return, exp, (FUNleft, expright)))
    | DATATYPE datatype_def (Datatype datatype_def)
    | IDX id optional_colon_sort EQ idx (IdxDef (id, optional_colon_sort, idx))
    | ABSIDX id optional_colon_sort EQ idx (AbsIdx2 (id, optional_colon_sort, idx))
    | ABSIDX id optional_colon_sort optional_eq_idx WITH decl_star END (AbsIdx (id, optional_colon_sort, optional_eq_idx, decl_star, (ABSIDXleft, ENDright)))
    | ABSIDX LCUR id COLON bsort BAR prop RCUR optional_eq_idx WITH decl_star END (AbsIdx (id, SOME (Subset (bsort, id, prop, (LCURleft, RCURright))), optional_eq_idx, decl_star, (ABSIDXleft, ENDright)))
    | ABSIDX LCUR id BAR prop RCUR optional_eq_idx WITH decl_star END (AbsIdx (id, SOME (Subset (Base ("_", (idleft, idright)), id, prop, (LCURleft, RCURright))), optional_eq_idx, decl_star, (ABSIDXleft, ENDright)))
    | TYPE id EQ ty (TypeDef (id, ty))
    | OPEN id (Open id)

datatype_def : id_plus bsorting_star datatype_def_kind EQ constr_bar_star (case map fst id_plus of id :: id_star => (id, id_star, bsorting_star, datatype_def_kind, constr_bar_star, (id_plusleft, constr_bar_starright)) | [] => raise Impossible "id_plus can't be empty")
                       
datatype_def_kind : COLON cur_bsort_plus (cur_bsort_plus)
                  | ([])
                    
ty : ty_term (ty_term)
   | ty DDASH idx LARROW ty (Arrow (ty1, idx, ty2, (ty1left, ty2right)))
   | ty ARROW ty (Arrow (ty1, VarI (underscore (ty1left, ty2right)), ty2, (ty1left, ty2right)))
   | ty ZERO_ARROW ty (Arrow (ty1, ConstIT ("0.0", (ty1left, ty2right)), ty2, (ty1left, ty2right)))
   | ty MULT ty (Prod (ty1, ty2, (ty1left, ty2right)))

ty_term : ty_atom (ty_atom)
        | ty_term ty_atom (AppTT (ty_term, ty_atom, (ty_termleft, ty_atomright)))
        | ty_term LCUR idx RCUR (AppTI (ty_term, idx, (ty_termleft, RCURright)))
        | ty_term LCUR RCUR (AppTI (ty_term, VarI (underscore (LCURleft, RCURright)), (ty_termleft, RCURright)))
                  
ty_atom : long_id (VarT long_id)
        | LPAREN ty RPAREN (ty)
        | quan sort_bind_plus COMMA ty (Quan (quan, sort_bind_plus, ty, (quanleft, tyright)))

exp : aexp (aexp)
     | exp PLUS exp (BinOp (EBPrim EBPIntAdd, exp1, exp2, (exp1left, exp2right)))
     | exp MINUS exp (BinOp (EBPrim EBPIntMinus, exp1, exp2, (exp1left, exp2right)))
     | exp MULT exp (BinOp (EBPrim EBPIntMult, exp1, exp2, (exp1left, exp2right)))
     | exp DIV exp (BinOp (EBPrim EBPIntDiv, exp1, exp2, (exp1left, exp2right)))
     | exp NAT_PLUS exp (BinOp (EBNat EBNAdd, exp1, exp2, (exp1left, exp2right)))
     | exp NAT_MINUS exp (BinOp (EBNat EBNBoundedMinus, exp1, exp2, (exp1left, exp2right)))
     | exp NAT_MULT exp (BinOp (EBNat EBNMult, exp1, exp2, (exp1left, exp2right)))
     | exp NAT_DIV exp (BinOp (EBNat EBNDiv, exp1, exp2, (exp1left, exp2right)))
     | exp NAT_LT exp (BinOp (EBNatCmp NCLt, exp1, exp2, (exp1left, exp2right)))
     | exp LT exp (BinOp (EBPrim EBPIntLt, exp1, exp2, (exp1left, exp2right)))
     | exp GT exp (BinOp (EBPrim EBPIntGt, exp1, exp2, (exp1left, exp2right)))
     | exp LE exp (BinOp (EBPrim EBPIntLe, exp1, exp2, (exp1left, exp2right)))
     | exp GE exp (BinOp (EBPrim EBPIntGe, exp1, exp2, (exp1left, exp2right)))
     | exp EQ exp (BinOp (EBPrim EBPIntEq, exp1, exp2, (exp1left, exp2right)))
     | exp NEQ exp (BinOp (EBPrim EBPIntNEq, exp1, exp2, (exp1left, exp2right)))
     | exp DOUBLE_POND exp (BinOp (EBPrim EBPBoolAnd, exp1, exp2, (exp1left, exp2right)))
     | exp DOUBLE_BAR exp (BinOp (EBPrim EBPBoolOr, exp1, exp2, (exp1left, exp2right)))
     | exp STR_CONCAT exp (BinOp (EBPrim EBPStrConcat, exp1, exp2, (exp1left, exp2right)))
     | exp LTRI exp (App (exp1, exp2, (exp1left, exp2right)))
     | exp SEMI_COLON exp (ESemiColon (exp1, exp2, (exp1left, exp2right)))
     | exp DCOLON exp (ECons (exp1, exp2, (exp1left, exp2right)))
     | exp COLON ty (Asc (exp, ty, (expleft, tyright)))
     | exp RTRI idx (AscTime (exp, idx, (expleft, idxright)))
     | exp LCUR idx RCUR (AppI (exp, idx, (expleft, idxright)))
     | exp LCUR RCUR (AppI (exp, VarI (underscore (LCURleft, RCURright)), (expleft, RCURright)))
     | exp aexp (App (exp, aexp, (expleft, aexpright)))

aexp : decorated_id (Var decorated_id)
     | LPAREN exp_comma_star RPAREN (Tuple (exp_comma_star, (LPARENleft, RPARENright)))
     | FN bind_plus return DARROW exp (Abs (bind_plus, return, exp, (FNleft, expright)))
     | CASE exp return OF rule_bar_star (Case (exp, return, rule_bar_star, (CASEleft, rule_bar_starright)))
     | IF exp THEN exp ELSE exp (EIte (exp1, exp2, exp3, (IFleft, exp3right)))
     | IFDEC exp THEN exp ELSE exp (EIfDec (exp1, exp2, exp3, (IFDECleft, exp3right)))
     | LET return decl_star IN exp END (Let (return, decl_star, exp, (LETleft, ENDright)))
     | SHARP INT (Const (ECNat INT, (SHARPleft, INTright)))
     | INT (Const (ECInt INT, (INTleft, INTright)))
     | STRING (Const (ECString STRING, (STRINGleft, STRINGright)))
     | LSQ exp_comma_star RSQ (EList (exp_comma_star, (LSQleft, RSQright)))
     | TILDE aexp (EUnOp (EUPrim EUPIntNeg, aexp, (TILDEleft, aexpright)))
     | NEVER (ENever (NEVERleft, NEVERright))

long_id : id ((NONE, id))
        | id DOT id (SOME id1, id2)
           
decorated_id : long_id ((long_id, false))
             | AT long_id ((long_id, true))          
           
idx : aidx (aidx)
    | idx PLUS idx (BinOpI (AddI, idx1, idx2, (idx1left, idx2right)))
    | idx MINUS idx (BinOpI (BoundedMinusI, idx1, idx2, (idx1left, idx2right)))
    | idx MAX idx (BinOpI (MaxI, idx1, idx2, (idx1left, idx2right)))
    | idx MIN idx (BinOpI (MinI, idx1, idx2, (idx1left, idx2right)))
    | idx MULT idx (BinOpI (MultI, idx1, idx2, (idx1left, idx2right)))
    | idx DIV INT (DivI (idx, (INT, (INTleft, INTright)), (idxleft, INTright)))
    | idx EXP idx (BinOpI (ExpNI, idx1, idx2, (idx1left, idx2right)))
    | idx DOUBLE_EQ idx (BinOpI (EqI, idx1, idx2, (idx1left, idx2right)))
    | idx LT idx (BinOpI (LtI, idx1, idx2, (idx1left, idx2right)))
    | idx GE idx (BinOpI (GeI, idx1, idx2, (idx1left, idx2right)))
    | idx DOUBLE_POND idx (BinOpI (AndI, idx1, idx2, (idx1left, idx2right)))
    | idx aidx (BinOpI (IApp, idx, aidx, (idxleft, aidxright)))

aidx : long_id (VarI long_id)
    | INT (ConstIN (INT, (INTleft, INTright)))
    | NNREAL (ConstIT (NNREAL, (NNREALleft, NNREALright)))
    | DOLLAR aidx (BinOpI (IApp, VarI (NONE, (str_idx_un_op ToReal, (DOLLARleft, DOLLARright))), aidx, (DOLLARleft, aidxright)))
    | LPAREN RPAREN (TTI (LPARENleft, RPARENright))
    | LPAREN idx RPAREN (idx)
    | FN id_plus DARROW idx (IAbs (id_plus, idx, (FNleft, idxright)))

prop : id (ConstP id)
     | TILDE prop (Not (prop, (TILDEleft, propright)))
     | prop AND prop (BinConn (And, prop1, prop2, (prop1left, prop2right)))
     | prop OR prop (BinConn (Or, prop1, prop2, (prop1left, prop2right)))
     | prop ARROW prop (BinConn (Imply, prop1, prop2, (prop1left, prop2right)))
     | prop IFF prop (BinConn (Iff, prop1, prop2, (prop1left, prop2right)))
     | idx EQ idx (BinPred (EqP, idx1, idx2, (idx1left, idx2right)))
     | idx NEQ idx (Not (BinPred (EqP, idx1, idx2, (idx1left, idx2right)), (idx1left, idx2right)))
     | idx LE idx (BinPred (LeP, idx1, idx2, (idx1left, idx2right)))
     | idx LT idx (BinPred (LtP, idx1, idx2, (idx1left, idx2right)))
     | idx GE idx (BinPred (GeP, idx1, idx2, (idx1left, idx2right)))
     | idx GT idx (BinPred (GtP, idx1, idx2, (idx1left, idx2right)))
     | idx BIG_O_INFIX idx (BinPred (BigO, idx1, idx2, (idx1left, idx2right)))
     | LPAREN prop RPAREN (prop)

optional_eq_idx : EQ idx (SOME idx)
                | (NONE)
              
sort : bsort (Basic bsort)
     | LCUR id COLON bsort BAR prop RCUR (Subset (bsort, id, prop, (LCURleft, RCURright)))
     | LCUR id BAR prop RCUR (Subset (Base ("_", (idleft, idright)), id, prop, (LCURleft, RCURright)))
     | ID idx (BigOSort (ID, Base ("_", (IDleft, IDright)), idx, (IDleft, idxright)))

bsort : id (Base id)

id : ID ((ID, (IDleft, IDright)))

exp_comma_star : exp comma_exp_star (exp :: comma_exp_star)
	       | ([])

comma_exp_star : COMMA exp comma_exp_star (exp :: comma_exp_star)
	       | ([])

bind_star : bind bind_star (bind @ bind_star)
	  | ([])
bind_plus : bind bind_star (bind @ bind_star)

bind : aptrn ([Typing (aptrn)])
     | sorting (map BindSort sorting)
     | LPAREN bind RPAREN (bind)

sort_bind_star : sort_bind sort_bind_star (sort_bind @ sort_bind_star)
	   | ([])
sort_bind_plus : sort_bind sort_bind_star (sort_bind @ sort_bind_star)

sort_bind : sorting (sorting)
      | LPAREN sort_bind RPAREN (sort_bind)

return : RETURN ty RTRI idx ((SOME ty, SOME idx))
       | RETURN ty ((SOME ty, NONE))
       | RETURN RTRI idx ((NONE, SOME idx))
       | ((NONE, NONE))

rec_return : COLON ty RTRI idx ((SOME ty, SOME idx))
       | COLON ty ((SOME ty, NONE))
       | RTRI idx ((NONE, SOME idx))
       | ((NONE, NONE))

rule_bar_star : rule bar_rule_star (rule :: bar_rule_star)
	      | ([])

bar_rule_star : BAR rule bar_rule_star (rule :: bar_rule_star)
	      | ([])

rule : ptrn DARROW exp ((ptrn, exp))

ptrn : decorated_id idx_ids ptrn_opt (ConstrP (decorated_id, map fst idx_ids, ptrn_opt, (decorated_idleft, ptrn_optright)))
     | id AS ptrn (AliasP (id, ptrn, (idleft, ptrnright)))
     | ptrn COLON ty (AnnoP (ptrn, ty, (ptrnleft, tyright)))
     | ptrn DCOLON ptrn (PCons (ptrn1, ptrn2, (ptrn1left, ptrn2right)))
     | aptrn (aptrn)

aptrn : LPAREN ptrn_comma_star RPAREN (TupleP (ptrn_comma_star, (LPARENleft, RPARENright)))
      | decorated_id (ConstrP (decorated_id, [], NONE, (decorated_idleft, decorated_idright)))
      | LSQ ptrn_comma_star RSQ (PList (ptrn_comma_star, (LSQleft, RSQright)))

ptrn_opt : ptrn (SOME ptrn)
         | (NONE)
               
ptrn_comma_star : ptrn comma_ptrn_star (ptrn :: comma_ptrn_star)
	       | ([])
comma_ptrn_star : COMMA ptrn comma_ptrn_star (ptrn :: comma_ptrn_star)
	        | ([])

idx_ids : LCUR id_plus RCUR idx_ids (id_plus @ idx_ids)
	| ([])

id_star : id id_star (id :: id_star)
	| ([])
id_plus : id id_star (id :: id_star)

quan : FORALL (Forall)

decl_star : decl decl_star (decl :: decl_star)
	 | ([])

constr : id sorting_star constr_core_opt ((id, sorting_star, constr_core_opt, (idleft, constr_core_optright)))
constr_core_opt : OF ty constr_result_opt (SOME (ty, constr_result_opt))
                | (NONE)
constr_result_opt : LARROW ty (SOME (ty))
(* constr_result_opt : ARROW ty (SOME (ty)) *)
                  | (NONE)

cur_sort : LCUR sort RCUR (sort)                       
cur_sort_plus : cur_sort cur_sort_star (cur_sort :: cur_sort_star)
cur_sort_star :  cur_sort_plus (cur_sort_plus)
	      | ([])
                         
cur_bsort : LCUR bsort RCUR (bsort)                       
cur_bsort_plus : cur_bsort cur_bsort_star (cur_bsort :: cur_bsort_star)
cur_bsort_star :  cur_bsort_plus (cur_bsort_plus)
	      | ([])
                         
(* sort_plus : sort cur_sort_star (sort :: cur_sort_star) *)

constr_bar_star : constr bar_constr_star (constr :: bar_constr_star)
	        | ([])

bar_constr_star : BAR constr bar_constr_star (constr :: bar_constr_star)
	        | ([])

sorting : LCUR id_plus COLON sort RCUR (sortings (id_plus, sort, (LCURleft, RCURright)))
        | LCUR id COLON sort RCUR ([(id, sort, (LCURleft, RCURright))])
        | LCUR id COLON bsort BAR prop RCUR ([(id, Subset (bsort, id, prop, (LCURleft, RCURright)), (LCURleft, RCURright))])
        | LCUR id BAR prop RCUR ([(id, Subset (Base ("_", (idleft, idright)), id, prop, (LCURleft, RCURright)), (LCURleft, RCURright))])
        | LCUR prop RCUR (
            let
              val r = (LCURleft, RCURright)
              val id = ("__tt", r)
              val bsort = Base ("Unit", r)
            in
              [(id, Subset (bsort, id, prop, r), r)]
            end
          )

sorting_star : sorting sorting_star (sorting @ sorting_star)
	   | ([])

bsorting : LCUR id_plus COLON bsort RCUR (bsortings (id_plus, bsort, (LCURleft, RCURright)))
        | LCUR id COLON bsort RCUR ([(id, bsort, (LCURleft, RCURright))])

bsorting_star : bsorting bsorting_star (bsorting @ bsorting_star)
	   | ([])

(* idx_un_op : LOG2 (Log2) *)

tnames : LSQ id_star RSQ (id_star)
       | ([])

optional_colon_sort : COLON sort (SOME sort)
                    | (NONE)
