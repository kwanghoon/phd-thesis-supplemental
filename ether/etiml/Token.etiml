pragma etiml ^0.1

interface tokenRecipient = interface
  public fun receiveApproval (_from : address, _value : uint256, _token : address, _extraData : bytes)
end

contract TokenERC20 = contract

  open Util                        
                        
  (* Public variables of the token *)
  public val name : ref string = ref ""

  public val symbol : ref string = ref ""
  public decimals : uint8 = 18
  (* 18 decimals is the strongly suggested default, avoid changing it *)
  public val totalSupply : ref uint256 = ref 0

  (* This creates an array with all balances *)
  public val balanceOf : amap uint256 = amap_empty
  public val allowance : a2map uint256 = amap_empty

  (* This generates a public event on the blockchain that will notify clients *)
  event Transfer(indexed from : address, indexed to : address, uint256 value)

  (* This notifies clients about the amount burnt *)
  event Burn(indexed from : address, value : uint256)

  (**
   * Constructor function
   *
   * Initializes contract with initial supply tokens to the creator of the contract
   *)
  public fun init (
        initialSupply : uint256,
        tokenName : string,
        tokenSymbol : string
    ) = 
    totalSupply := !initialSupply * 10 ** uint256(decimals);  (* Update total supply with the decimal amount *)
    amap_set balanceOf msg_sender (!totalSupply);                (* Give the creator all initial tokens *)
    name := tokenName;                                   (* Set the name for display purposes *)
    symbol := tokenSymbol                               (* Set the symbol for display purposes *)

  (**
   * Internal transfer, only can be called by this contract
   *)
  internal fun _transfer (_from : address, _to : address, _value : uint) =
    (* Prevent transfer to 0x0 address. Use burn() instead *)
    require(_to <> 0x0);
    (* Check if the sender has enough *)
    require(amap_get balanceOf _from >= _value);
    (* Check for overflows *)
    require(amap_get balanceOf _to + _value > amap_get balanceOf _to);
    (* Save this for an assertion in the future *)
    let previousBalances : uint = balanceOf[_from] + balanceOf[_to];
    (* Subtract from the sender *)
    amap_modify balanceOf _from (subBy _value);
    (* Add the same to the recipient *)
    amap_modify balanceOf _to (addBy _value);
    Transfer(_from, _to, _value);
    (* Asserts are used to use static analysis to find bugs in your code. They should never fail *)
    assert(amap_get balanceOf _from + amap_get balanceOf _to = previousBalances)

  (**
   * Transfer tokens
   *
   * Send `_value` tokens to `_to` from your account
   *
   * @param _to The address of the recipient
   * @param _value the amount to send
   *)
  public fun transfer (_to : address, _value : uint256) =
    _transfer(msg_sender, _to, _value)

  (**
   * Transfer tokens from other address
   *
   * Send `_value` tokens to `_to` on behalf of `_from`
   *
   * @param _from The address of the sender
   * @param _to The address of the recipient
   * @param _value the amount to send
   *)
  public fun transferFrom (_from : address, _to : address, _value : uint256) returns bool =
    require(_value <= a2map_get allowance _from msg_sender);     (* Check allowance *)
    a2map_modify allowance _from msg_sender (subBy _value);
    _transfer(_from, _to, _value);
    true

  (**
   * Set allowance for other address
   *
   * Allows `_spender` to spend no more than `_value` tokens on your behalf
   *
   * @param _spender The address authorized to spend
   * @param _value the max amount they can spend
   *)
  public fun approve (_spender : address, _value : uint256) returns bool =
    a2map_set allowance msg_sender _spender _value;
    true

  (**
   * Set allowance for other address and notify
   *
   * Allows `_spender` to spend no more than `_value` tokens on your behalf, and then ping the contract about it
   *
   * @param _spender The address authorized to spend
   * @param _value the max amount they can spend
   * @param _extraData some extra information to send to the approved contract
   *)
  public fun approveAndCall (_spender : address, _value : uint256, _extraData : bytes) =
    let spender : tokenRecipient = tokenRecipient(_spender);
    if approve(_spender, _value) then
      receiveApproval(spender, msg_sender, _value, this, _extraData);
      true
    else false endif

  (**
   * Destroy tokens
   *
   * Remove `_value` tokens from the system irreversibly
   *
   * @param _value the amount of money to burn
   *)
  public fun burn (_value : uint256) returns bool =
    require(amap_get balanceOf msg_sender >= _value);   (* Check if the sender has enough *)
    amap_modify balanceOf msg_sender (subBy _value);            (* Subtract from the sender *)
    modify totalSupply (subBy _value);                      (* Updates totalSupply *)
    Burn(msg_sender, _value);
    true

  (**
   * Destroy tokens from other account
   *
   * Remove `_value` tokens from the system irreversibly on behalf of `_from`.
   *
   * @param _from the address of the sender
   * @param _value the amount of money to burn
   *)
  public fun burnFrom (_from : address, _value : uint256) returns bool =
    require(amap_get balanceOf _from >= _value);                (* Check if the targeted balance is enough *)
    require(_value <= a2map_get allowance _from msg_sender);    (* Check allowance *)
    amap_modify balanceOf _from (subBy _value);                         (* Subtract from the targeted balance *)
    a2map_modify allowance _from msg_sender (subBy _value);             (* Subtract from the sender's allowance *)
    modify totalSupply (subBy _value);                              (* Update totalSupply *)
    Burn(_from, _value);
    true

end
